{"version":3,"sources":["web-build/register-service-worker.js","../lib/module/types.js","../lib/module/publicClientApplication.js","../lib/module/index.js","src/b2cClient.ts","src/msalConfig.ts","src/App.tsx","index.tsx"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","MSALPromptType","Ios_ModalPresentationStyle","Ios_MSALWebviewType","promptTypeToString","promptType","SELECT_ACCOUNT","LOGIN","CONSENT","WHEN_REQUIRED","config","obj","key","value","this","Object","defineProperty","enumerable","configurable","writable","_pca","params","paramsWithoutPromptType","accessToken","account","expiresOn","idToken","idTokenClaims","scopes","tenantId","acquireTokenPopup","prompt","identifier","homeAccountId","environment","username","claims","getTime","_params$account$envir","acquireTokenSilent","accounts","getAllAccounts","Promise","resolve","map","a","accountIdentifier","getAccountByHomeId","reject","_account$environment","logout","removeAccount","delay","ms","setTimeout","B2CClient","auth","policies","authorityBase","restOfAuthConfig","authority","getAuthority","signInSignUp","knownAuthorities","values","policy","pca","PublicClientApplication","isSignedIn","Error","acquireToken","message","includes","B2C_PASSWORD_CHANGE","passwordReset","resetPassword","getAccountForPolicy","signInAccount","undefined","getAccounts","signOutPromises","signOut","all","wvp","webviewParameters","rest","ios_prefersEphemeralWebBrowserSession","Platform","OS","signIn","find","toLowerCase","b2cScopes","b2cClient","clientId","cache","cacheLocation","App","React","useState","authResult","setAuthResult","iosEphemeralSession","setIosEphemeralSession","useEffect","async","SafeAreaView","style","styles","container","View","buttonContainer","Pressable","button","onPress","res","warn","Text","switchButton","Switch","onValueChange","ScrollView","scrollView","JSON","stringify","StyleSheet","create","flex","flexDirection","flexWrap","padding","backgroundColor","borderWidth","margin","width","justifyContent","alignItems","disabledButton","marginHorizontal","marginBottom","AppRegistry","registerComponent","appName","rootTag","document","getElementById","runApplication"],"mappings":"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","file":"static/js/app.96ef618e.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","export let MSALPromptType;\n\n(function (MSALPromptType) {\n  MSALPromptType[MSALPromptType[\"SELECT_ACCOUNT\"] = 0] = \"SELECT_ACCOUNT\";\n  MSALPromptType[MSALPromptType[\"LOGIN\"] = 1] = \"LOGIN\";\n  MSALPromptType[MSALPromptType[\"CONSENT\"] = 2] = \"CONSENT\";\n  MSALPromptType[MSALPromptType[\"WHEN_REQUIRED\"] = 3] = \"WHEN_REQUIRED\";\n  MSALPromptType[MSALPromptType[\"DEFAULT\"] = 3] = \"DEFAULT\";\n})(MSALPromptType || (MSALPromptType = {}));\n\n/**\n * See https://developer.apple.com/documentation/uikit/uimodalpresentationstyle\n */\nexport let Ios_ModalPresentationStyle;\n/**\n * See https://azuread.github.io/microsoft-authentication-library-for-objc/Enums/MSALWebviewType.html\n */\n\n(function (Ios_ModalPresentationStyle) {\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"fullScreen\"] = 0] = \"fullScreen\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"pageSheet\"] = 1] = \"pageSheet\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"formSheet\"] = 2] = \"formSheet\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"currentContext\"] = 3] = \"currentContext\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"custom\"] = 4] = \"custom\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"overFullScreen\"] = 5] = \"overFullScreen\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"overCurrentContext\"] = 6] = \"overCurrentContext\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"popover\"] = 7] = \"popover\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"blurOverFullScreen\"] = 8] = \"blurOverFullScreen\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"none\"] = -1] = \"none\";\n  Ios_ModalPresentationStyle[Ios_ModalPresentationStyle[\"automatic\"] = -2] = \"automatic\";\n})(Ios_ModalPresentationStyle || (Ios_ModalPresentationStyle = {}));\n\nexport let Ios_MSALWebviewType;\n\n(function (Ios_MSALWebviewType) {\n  Ios_MSALWebviewType[Ios_MSALWebviewType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  Ios_MSALWebviewType[Ios_MSALWebviewType[\"AUTHENTICATION_SESSION\"] = 1] = \"AUTHENTICATION_SESSION\";\n  Ios_MSALWebviewType[Ios_MSALWebviewType[\"SAFARI_VIEW_CONTROLLER\"] = 2] = \"SAFARI_VIEW_CONTROLLER\";\n  Ios_MSALWebviewType[Ios_MSALWebviewType[\"WK_WEB_VIEW\"] = 3] = \"WK_WEB_VIEW\";\n})(Ios_MSALWebviewType || (Ios_MSALWebviewType = {}));\n//# sourceMappingURL=types.js.map","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PublicClientApplication as MSALPublicClientApplication } from '@azure/msal-browser';\nimport { MSALPromptType } from './types';\n\nfunction promptTypeToString(promptType) {\n  switch (promptType) {\n    case MSALPromptType.SELECT_ACCOUNT:\n      return 'select_account';\n\n    case MSALPromptType.LOGIN:\n      return 'login';\n\n    case MSALPromptType.CONSENT:\n      return 'consent';\n\n    case MSALPromptType.WHEN_REQUIRED:\n      return 'none';\n  }\n}\n\nexport default class PublicClientApplication {\n  constructor(config) {\n    this.config = config;\n\n    _defineProperty(this, \"_pca\", void 0);\n\n    this._pca = new MSALPublicClientApplication(this.config);\n  }\n  /**\n   * Acquire a token interactively\n   * @param {MSALInteractiveParams} params\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n\n\n  async acquireToken(params) {\n    const {\n      promptType,\n      ...paramsWithoutPromptType\n    } = params;\n    const {\n      accessToken,\n      account,\n      expiresOn,\n      idToken,\n      idTokenClaims,\n      scopes,\n      tenantId\n    } = await this._pca.acquireTokenPopup(promptType ? { ...paramsWithoutPromptType,\n      prompt: promptTypeToString(promptType)\n    } : paramsWithoutPromptType);\n    return {\n      accessToken,\n      account: {\n        identifier: account.homeAccountId,\n        environment: account.environment,\n        tenantId: account.tenantId,\n        username: account.username,\n        claims: idTokenClaims\n      },\n      expiresOn: expiresOn.getTime(),\n      idToken,\n      scopes,\n      tenantId\n    };\n  }\n  /**\n   * Acquire a token silently\n   * @param {MSALSilentParams} params - Includes the account identifer retrieved from a\n   * previous interactive login\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n\n\n  async acquireTokenSilent(params) {\n    var _params$account$envir;\n\n    const {\n      accessToken,\n      account,\n      expiresOn,\n      idToken,\n      idTokenClaims,\n      scopes,\n      tenantId\n    } = await this._pca.acquireTokenSilent({ ...params,\n      account: { ...params.account,\n        homeAccountId: params.account.identifier,\n        environment: (_params$account$envir = params.account.environment) !== null && _params$account$envir !== void 0 ? _params$account$envir : ''\n      }\n    });\n    return {\n      accessToken,\n      account: {\n        identifier: account.homeAccountId,\n        environment: account.environment,\n        tenantId: account.tenantId,\n        username: account.username,\n        claims: idTokenClaims\n      },\n      expiresOn: expiresOn.getTime(),\n      idToken,\n      scopes,\n      tenantId\n    };\n  }\n  /**\n   * Get all accounts for which this application has refresh tokens\n   * @return Promise containing array of MSALAccount objects for which this application has refresh tokens.\n   */\n\n\n  getAccounts() {\n    const accounts = this._pca.getAllAccounts();\n\n    return Promise.resolve(accounts.map(a => {\n      const {\n        homeAccountId: identifier,\n        environment,\n        tenantId,\n        username\n      } = a;\n      return {\n        identifier,\n        environment,\n        tenantId,\n        username\n      };\n    }));\n  }\n  /** Retrieve the account matching the identifier\n   * @return Promise containing MSALAccount object\n   */\n\n\n  getAccount(accountIdentifier) {\n    const account = this._pca.getAccountByHomeId(accountIdentifier);\n\n    if (account == null) {\n      return Promise.reject('Account not found');\n    } else {\n      const {\n        homeAccountId: identifier,\n        environment,\n        tenantId,\n        username\n      } = account;\n      return Promise.resolve({\n        identifier,\n        environment,\n        tenantId,\n        username\n      });\n    }\n  }\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account.\n   * @param {MSALAccount} account\n   * @return A promise containing a boolean = true if account removal was successful\n   * otherwise rejects\n   */\n\n\n  removeAccount(account) {\n    var _account$environment;\n\n    this._pca.logout({\n      account: { ...account,\n        homeAccountId: account.identifier,\n        environment: (_account$environment = account.environment) !== null && _account$environment !== void 0 ? _account$environment : ''\n      }\n    });\n\n    return Promise.resolve(true);\n  }\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account.\n   * @param {MSALSignoutParams} params\n   * @return A promise which resolves if sign out is successful,\n   * otherwise rejects\n   */\n\n\n  signOut(params) {\n    return this.removeAccount(params.account);\n  }\n\n}\n//# sourceMappingURL=publicClientApplication.js.map","import PublicClientApplication from './publicClientApplication';\nexport * from './types';\nexport default PublicClientApplication;\n//# sourceMappingURL=index.js.map","import PublicClientApplication, {\n  MSALInteractiveParams,\n  MSALResult,\n  MSALSilentParams,\n  MSALAccount,\n  MSALSignoutParams,\n  MSALWebviewParams,\n  MSALConfiguration,\n} from 'react-native-msal';\nimport { Platform } from 'react-native';\n\nexport interface B2CPolicies {\n  signInSignUp: string;\n  passwordReset?: string;\n}\n\nexport type B2CConfiguration = Omit<MSALConfiguration, 'auth'> & {\n  auth: {\n    clientId: string;\n    authorityBase: string;\n    policies: B2CPolicies;\n    redirectUri?: string;\n  };\n};\nexport type B2CSignInParams = Omit<MSALInteractiveParams, 'authority'>;\nexport type B2CAcquireTokenSilentParams = Pick<MSALSilentParams, 'forceRefresh' | 'scopes'>;\nexport type B2CSignOutParams = Pick<MSALSignoutParams, 'signoutFromBrowser' | 'webviewParameters'>;\n\nconst delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport default class B2CClient {\n  private static readonly B2C_PASSWORD_CHANGE = 'AADB2C90118';\n  private pca: PublicClientApplication;\n\n  /** Construct a B2CClient object\n   * @param clientId The id of the b2c application\n   * @param authorityBase The authority URL, without a policy name.\n   * Has the form: https://TENANT_NAME.b2clogin.com/tfp/TENANT_NAME.onmicrosoft.com/\n   * @param policies An object containing the policies you will be using.\n   * The sign in sign up policy is required, the rest are optional\n   */\n  constructor(private readonly config: B2CConfiguration) {\n    // Set the default authority for the PublicClientApplication (PCA). If we don't provide one,\n    // it will use the default, common authority\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { authorityBase: _, policies, ...restOfAuthConfig } = this.config.auth;\n    const authority = this.getAuthority(policies.signInSignUp);\n    // We need to provide all authorities we'll be using up front\n    const knownAuthorities = Object.values(policies).map((policy) => this.getAuthority(policy));\n    // Instantiate the PCA\n    this.pca = new PublicClientApplication({\n      ...this.config,\n      auth: { authority, knownAuthorities, ...restOfAuthConfig },\n    });\n  }\n\n  /** Initiates an interactive sign-in. If the user clicks \"Forgot Password\", and a reset password policy\n   *  was provided to the client, it will initiate the password reset flow\n   */\n  public async signIn(params: B2CSignInParams): Promise<MSALResult> {\n    const isSignedIn = await this.isSignedIn();\n    if (isSignedIn) {\n      throw Error('A user is already signed in');\n    }\n\n    try {\n      // If we don't provide an authority, the PCA will use the one we passed to it when we created it\n      // (the sign in sign up policy)\n      return await this.pca.acquireToken(params);\n    } catch (error) {\n      if (error.message.includes(B2CClient.B2C_PASSWORD_CHANGE) && this.config.auth.policies.passwordReset) {\n        return await this.resetPassword(params);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /** Gets a token silently. Will only work if the user is already signed in */\n  public async acquireTokenSilent(params: B2CAcquireTokenSilentParams) {\n    const account = await this.getAccountForPolicy(this.config.auth.policies.signInSignUp);\n    if (account) {\n      // We provide the account that we got when we signed in, with the matching sign in sign up authority\n      // Which again, we set as the default authority so we don't need to provide it explicitly.\n      return await this.pca.acquireTokenSilent({ ...params, account });\n    } else {\n      throw Error('Could not find existing account for sign in sign up policy');\n    }\n  }\n\n  /** Returns true if a user is signed in, false if not */\n  public async isSignedIn() {\n    const signInAccount = await this.getAccountForPolicy(this.config.auth.policies.signInSignUp);\n    return signInAccount !== undefined;\n  }\n\n  /** Removes all accounts from the device for this app. User will have to sign in again to get a token */\n  public async signOut(params?: B2CSignOutParams) {\n    const accounts = await this.pca.getAccounts();\n    const signOutPromises = accounts.map((account) => this.pca.signOut({ ...params, account }));\n    await Promise.all(signOutPromises);\n    return true;\n  }\n\n  private async resetPassword(params: B2CSignInParams) {\n    const { webviewParameters: wvp, ...rest } = params;\n    const webviewParameters: MSALWebviewParams = {\n      ...wvp,\n      // We use an ephemeral session because if we're resetting a password it means the user\n      // is not using an identity provider, so we don't need a logged-in browser session\n      ios_prefersEphemeralWebBrowserSession: true,\n    };\n    if (this.config.auth.policies.passwordReset) {\n      // Because there is no prompt before starting an iOS ephemeral session, it will be quick to\n      // open and begin before the other one has ended, causing an error saying that only one\n      // interactive session is allowed at a time. So we have to slow it down a little\n      if (Platform.OS === 'ios') {\n        await delay(1000);\n      }\n      // Use the password reset policy in the interactive `acquireToken` call\n      const authority = this.getAuthority(this.config.auth.policies.passwordReset);\n      await this.pca.acquireToken({ ...rest, webviewParameters, authority });\n      // Sign in again after resetting the password\n      return await this.signIn(params);\n    } else {\n      throw Error('B2CClient missing password reset policy');\n    }\n  }\n\n  private async getAccountForPolicy(policy: string): Promise<MSALAccount | undefined> {\n    const accounts = await this.pca.getAccounts();\n    return accounts.find((account) => account.identifier.includes(policy.toLowerCase()));\n  }\n\n  private getAuthority(policy: string) {\n    return `${this.config.auth.authorityBase}/${policy}`;\n  }\n}\n","import type { B2CConfiguration } from './b2cClient';\n\nexport const b2cConfig: B2CConfiguration = {\n  auth: {\n    clientId: 'fc8ecae3-0883-45f4-ac1c-013dfa11cb9c',\n    authorityBase: 'https://stashcafe.b2clogin.com/tfp/stashcafe.onmicrosoft.com',\n    policies: {\n      signInSignUp: 'B2C_1_SignInUp',\n      passwordReset: 'B2C_1_PasswordReset',\n    },\n  },\n  // web only:\n  cache: { cacheLocation: 'localStorage' },\n};\n\nexport const b2cScopes = ['https://stashcafe.onmicrosoft.com/api/user_impersonation'];\n","/**\n * Example for a Azure B2C application using a B2CClient helper class\n */\n\nimport React from 'react';\nimport { Platform, SafeAreaView, ScrollView, StyleSheet, Switch, Text, View, Pressable } from 'react-native';\nimport type { MSALResult, MSALWebviewParams } from 'react-native-msal';\nimport B2CClient from './b2cClient';\nimport { b2cConfig, b2cScopes as scopes } from './msalConfig';\n\nconst b2cClient = new B2CClient(b2cConfig);\n\nexport default function App() {\n  const [authResult, setAuthResult] = React.useState<MSALResult | null>(null);\n  const [iosEphemeralSession, setIosEphemeralSession] = React.useState(false);\n  const webviewParameters: MSALWebviewParams = {\n    ios_prefersEphemeralWebBrowserSession: iosEphemeralSession,\n  };\n\n  React.useEffect(() => {\n    async function init() {\n      const isSignedIn = await b2cClient.isSignedIn();\n      if (isSignedIn) {\n        setAuthResult(await b2cClient.acquireTokenSilent({ scopes }));\n      }\n    }\n    init();\n  }, []);\n\n  const handleSignInPress = async () => {\n    try {\n      const res = await b2cClient.signIn({ scopes, webviewParameters });\n      setAuthResult(res);\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  const handleAcquireTokenPress = async () => {\n    try {\n      const res = await b2cClient.acquireTokenSilent({ scopes });\n      setAuthResult(res);\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  const handleSignoutPress = async () => {\n    try {\n      await b2cClient.signOut();\n      setAuthResult(null);\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.buttonContainer}>\n        {authResult ? (\n          <>\n            <Pressable style={styles.button} onPress={handleAcquireTokenPress}>\n              <Text>Acquire Token (Silent)</Text>\n            </Pressable>\n            <Pressable style={styles.button} onPress={handleSignoutPress}>\n              <Text>Sign Out</Text>\n            </Pressable>\n          </>\n        ) : (\n          <Pressable style={styles.button} onPress={handleSignInPress}>\n            <Text>Sign In</Text>\n          </Pressable>\n        )}\n\n        {Platform.OS === 'ios' ? (\n          <Pressable\n            style={[styles.button, styles.switchButton]}\n            onPress={() => setIosEphemeralSession(!iosEphemeralSession)}\n          >\n            <Text>Prefer ephemeral browser session (iOS only)</Text>\n            <Switch value={iosEphemeralSession} onValueChange={setIosEphemeralSession} />\n          </Pressable>\n        ) : null}\n      </View>\n      <ScrollView style={styles.scrollView}>\n        <Text>{JSON.stringify(authResult, null, 2)}</Text>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    padding: '0.5%',\n  },\n  button: {\n    backgroundColor: 'aliceblue',\n    borderWidth: 1,\n    margin: '0.5%',\n    padding: 8,\n    width: '49%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabledButton: {\n    backgroundColor: '#ddd',\n  },\n  switchButton: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 4,\n    width: '99%',\n  },\n  scrollView: {\n    marginHorizontal: '1%',\n    marginBottom: '1%',\n    borderWidth: 1,\n  },\n});\n","import { AppRegistry, Platform } from 'react-native';\nimport App from './src/App';\nimport { name as appName } from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n\nif (Platform.OS === 'web') {\n  const rootTag = document.getElementById('root');\n  AppRegistry.runApplication(appName, { rootTag });\n}\n"],"sourceRoot":""}